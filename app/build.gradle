apply plugin: 'com.android.application'
apply plugin: "androidx.navigation.safeargs"
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.1'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }
    def androidExclusion = [
            '**/databinding/**/*.*',
            '**/android/databinding/*Binding.*',
            '**/androidx/databinding/*',
            '**/DataBinderMapperImpl.*',
            '**/DataBinderMapperImpl$*.*',
            '**/DataBinderMapperImpl.class',
            '**/DataBinderMapperImpl/**/*.*',
            '**/*InterfaceImpl.*',
            '**/DataBindingInfo.*',
            '**/MainApplication.*',
            '**/MainActivity.*',
            '**/model/*',
            '**/util/*',
            '**/generated/*',
            '**/BR.*',
            '**/R.*',
            '**/R$*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*_MembersInjector.*',
            '**/*Module_*Factory.*',
            '**/*Args.class',
            '**/*Args.Builder.*',
            '**/*Args$*.*',
            '**/*Directions.*',
            '**/*Directions.Builder.*',
            '**/*Directions$*.*'
    ]

    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: androidExclusion)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'outputs/code_coverage/debugAndroidTest/connected/*.ec', 'jacoco/testDebugUnitTest.exec'])
}

def getIP() {
    InetAddress result = null;
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
    while (interfaces.hasMoreElements()) {
        Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses();
        while (addresses.hasMoreElements()) {
            InetAddress address = addresses.nextElement();
            if (!address.isLoopbackAddress()) {
                if (isPrivateIp(address)) {
                    return address.getHostAddress();
                } else if (result == null) {
                    result = address;
                }
            }
        }
    }
    return "0.0.0.0";
}

def isPrivateIp(InetAddress ip) {
    long ip172Low = ipToLong(InetAddress.getByName("172.16.0.0"));
    long ip172High = ipToLong(InetAddress.getByName("172.31.255.255"));
    long ip192Low = ipToLong(InetAddress.getByName("192.168.0.0"));
    long ip192High = ipToLong(InetAddress.getByName("192.168.255.255"));
    long ipToCheck = ipToLong(ip);
    if(ipToCheck >= ip192Low && ipToCheck <= ip192High) {
        return true;
    } else if(ipToCheck >= ip172Low && ipToCheck <= ip172High) {
        return true;
    } else {
        return false;
    }
}

def ipToLong(InetAddress ip) {
    byte[] octets = ip.getAddress();
    long result = 0;
    for (byte octet : octets) {
        result <<= 8;
        result |= octet & 0xff;
    }
    return result;
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    defaultConfig {
        applicationId "com.mastercard.consumerreferenceapp"
        minSdkVersion 28
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    applicationVariants.all { variant ->
        variant.buildConfigField 'String', 'BASE_URL', "\"http://${getIP()}:8081/\""
    }

    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = false
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    def nav_version = "2.3.0-alpha04"
    // Java language implementation
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    implementation 'com.jakewharton.timber:timber:4.7.1'
    // Dynamic Feature Module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.0'

    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

    def fragment_version = "1.2.4"
    implementation "androidx.fragment:fragment:$fragment_version"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'androidx.room:room-runtime:2.2.5'
    annotationProcessor 'androidx.room:room-compiler:2.2.5'
    implementation "com.github.VaibhavLakhera:Circular-Progress-View:0.1.0"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.24.5'
    androidTestImplementation 'org.mockito:mockito-android:2.24.5'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'com.android.support.test:runner:0.4'
    androidTestImplementation 'com.android.support.test:rules:0.4'
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation("com.squareup.okhttp3:mockwebserver:3.6.0")
    androidTestImplementation("com.squareup.okhttp3:okhttp:3.6.0")
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation("com.squareup.okhttp3:mockwebserver:3.6.0")
    testImplementation("com.squareup.okhttp3:mockwebserver:3.6.0")
    testImplementation("com.squareup.okhttp3:okhttp:3.6.0")
}
